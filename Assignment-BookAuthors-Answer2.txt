
for book_authors

Step1

class book(models.Model):
    name = models.CharField(max_length=255)
    desc = models.TextField(max_length=1000)
    created_at = models.DateTimeField(auto_now_add = True)
    updated_at = models.DateTimeField(auto_now = True)
    # authors = models.ManyToManyField(author, related_name="books")

    def __str__(self):
        return str(self.id)+'-'+self.name+'-'+self.desc+'-'+str(self.authors)

class author(models.Model):
    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)
    email = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add = True)
    updated_at = models.DateTimeField(auto_now = True)
    books = models.ManyToManyField(book, related_name="authors")

    def __str__(self):
        return str(self.id)+'-'+self.first_name+'-'+self.last_name+'-'+self.email+'-'+str(self.books)

Step2

*************************************************************
>python manage.py makemigrations
Migrations for 'book_authors':
  apps/book_authors/migrations/0001_initial.py
    - Create model author
    - Create model book
    - Add field books to author
*************************************************************
>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, book_authors, contenttypes, dojo_ninjas, sessions
Running migrations:
  Applying book_authors.0001_initial... OK
*************************************************************

Step3

python manage.py shell

Step4

In [1]: from apps.book_authors.models import *

In [8]: author.objects.create(first_name='one_first', last_name='one_last', email='one@one.com')
Out[8]: <author: 1-one_first-one_last-one@one.com-book_authors.book.None>

In [10]: book.objects.create(name='one_book', desc='all about one')
Out[10]: <book: 1-one_book-all about one-book_authors.author.None>

In [11]: book.objects.first().authors
Out[11]: <django.db.models.fields.related_descriptors.ManyRelatedManager at 0x10a0a9210>

In [13]: author.objects.first().books
Out[13]: <django.db.models.fields.related_descriptors.ManyRelatedManager at 0x10a0a9550>

In [14]: author.objects.all()
Out[14]: <QuerySet [<author: 1-one_first-one_last-one@one.com-book_authors.book.None>]>

In [15]: book.objects.all()
Out[15]: <QuerySet [<book: 1-one_book-all about one-book_authors.author.None>]>

Step5

*************************************************************
>python manage.py makemigrations
No changes detected
*************************************************************
>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, book_authors, contenttypes, dojo_ninjas, sessions
Running migrations:
  No migrations to apply.
*************************************************************

------------------------------------------------------------------------------------------

==================================================================================================

1. Create a new model called 'Book' with the information above.

    step 1 to step 2

==================================================================================================

2. Create a new model called 'Author' with the information above.  Design the models in a way that you could perform the following:
Book.objects.first().authors
Author.objects.first().books

    step 3 to step 4

==================================================================================================

3. Successfully create and run the migration files

    step 5 (step 2)

==================================================================================================

4. Using the shell...

python manage.py shell

==================================================================================================

4.1. Create 5 books with the following names: C sharp, Java, Python, PHP, Ruby

In [1]: from apps.book_authors.models import *

In [2]: book.objects.create(name='C sharp', desc='Book of C sharp')
Out[2]: <book: 2-C sharp-Book of C sharp-book_authors.author.None>

In [3]: book.objects.create(name='Java', desc='Book of Java')
Out[3]: <book: 3-Java-Book of Java-book_authors.author.None>

In [4]: book.objects.create(name='Python', desc='Book of Python')
Out[4]: <book: 4-Python-Book of Python-book_authors.author.None>

In [5]: book.objects.create(name='PHP', desc='Book of PHP')
Out[5]: <book: 5-PHP-Book of PHP-book_authors.author.None>

In [6]: book.objects.create(name='Ruby', desc='Book of Ruby')
Out[6]: <book: 6-Ruby-Book of Ruby-book_authors.author.None>

==================================================================================================

4.2. Create 5 different authors: Mike, Speros, John, Jadee, Jay

In [7]: author.objects.create(first_name='Mike', last_name='Mike', email='mike@mike.com')
Out[7]: <author: 2-Mike-Mike-mike@mike.com-book_authors.book.None>

In [8]: author.objects.create(first_name='Speros', last_name='Speros', email='speros@speros.com')
Out[8]: <author: 3-Speros-Speros-speros@speros.com-book_authors.book.None>

In [9]: author.objects.create(first_name='John', last_name='John', email='john@john.com')
Out[9]: <author: 4-John-John-john@john.com-book_authors.book.None>

In [10]: author.objects.create(first_name='Jadee', last_name='Jadee', email='jadee@jadee.com')
Out[10]: <author: 5-Jadee-Jadee-jadee@jadee.com-book_authors.book.None>

In [11]: author.objects.create(first_name='Jay', last_name='Jay', email='jay@jay.com')
Out[11]: <author: 6-Jay-Jay-jay@jay.com-book_authors.book.None>

==================================================================================================

5. Add a new field in the authors table called 'notes'.  Make this a TextField.  Successfully create and run the migration files.

class book(models.Model):
    name = models.CharField(max_length=255)
    desc = models.TextField(max_length=1000)
    created_at = models.DateTimeField(auto_now_add = True)
    updated_at = models.DateTimeField(auto_now = True)
    # authors = models.ManyToManyField(author, related_name="books")

    def __str__(self):
        return str(self.id)+'-'+self.name+'-'+self.desc+'-'+str(self.authors)

class author(models.Model):
    first_name = models.CharField(max_length=255)
    last_name = models.CharField(max_length=255)
    email = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add = True)
    updated_at = models.DateTimeField(auto_now = True)
    books = models.ManyToManyField(book, related_name="authors")
    notes = models.TextField(default='')

    def __str__(self):
        return str(self.id)+'-'+self.first_name+'-'+self.last_name+'-'+self.email+'-'+self.notes+'-'+str(self.books)

*************************************************************
>python manage.py makemigrations
Migrations for 'book_authors':
  apps/book_authors/migrations/0002_author_notes.py
    - Add field notes to author
*************************************************************
>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, book_authors, contenttypes, dojo_ninjas, sessions
Running migrations:
  Applying book_authors.0002_author_notes... OK
*************************************************************

==================================================================================================

6. Using the shell...

python manage.py shell

In [1]: from apps.book_authors.models import *

In [3]: book.objects.all()
Out[3]: <QuerySet [<book: 1-one_book-all about one-book_authors.author.None>, <book: 2-C sharp-Book of C sharp-book_authors.author.None>, <book: 3-Java-Book of Java-book_authors.author.None>, <book: 4-Python-Book of Python-book_authors.author.None>, <book: 5-PHP-Book of PHP-book_authors.author.None>, <book: 6-Ruby-Book of Ruby-book_authors.author.None>]>

In [4]: book.objects.get(id=1).delete()
Out[4]: (1, {u'book_authors.author_books': 0, u'book_authors.book': 1})

In [5]: author.objects.all()
Out[5]: <QuerySet [<author: 1-one_first-one_last-one@one.com--book_authors.book.None>, <author: 2-Mike-Mike-mike@mike.com--book_authors.book.None>, <author: 3-Speros-Speros-speros@speros.com--book_authors.book.None>, <author: 4-John-John-john@john.com--book_authors.book.None>, <author: 5-Jadee-Jadee-jadee@jadee.com--book_authors.book.None>, <author: 6-Jay-Jay-jay@jay.com--book_authors.book.None>]>

In [6]: author.objects.get(id=1).delete()
Out[6]: (1, {u'book_authors.author': 1, u'book_authors.author_books': 0})

In [7]: book.objects.all()
Out[7]: <QuerySet [<book: 2-C sharp-Book of C sharp-book_authors.author.None>, <book: 3-Java-Book of Java-book_authors.author.None>, <book: 4-Python-Book of Python-book_authors.author.None>, <book: 5-PHP-Book of PHP-book_authors.author.None>, <book: 6-Ruby-Book of Ruby-book_authors.author.None>]>

In [8]: author.objects.all()
Out[8]: <QuerySet [<author: 2-Mike-Mike-mike@mike.com--book_authors.book.None>, <author: 3-Speros-Speros-speros@speros.com--book_authors.book.None>, <author: 4-John-John-john@john.com--book_authors.book.None>, <author: 5-Jadee-Jadee-jadee@jadee.com--book_authors.book.None>, <author: 6-Jay-Jay-jay@jay.com--book_authors.book.None>]>

==================================================================================================

6.1. Change the name of the 5th book to C#

In [9]: book.objects.last()
Out[9]: <book: 6-Ruby-Book of Ruby-book_authors.author.None>

In [10]: b = book.objects.last()

In [11]: b.name = 'C#'

In [12]: b.desc = 'book of C#'

In [13]: b.save()

In [14]: book.objects.last()
Out[14]: <book: 6-C#-book of C#-book_authors.author.None>

==================================================================================================

6.2. Change the first_name of the 5th author to Ketul

In [14]: book.objects.last()
Out[14]: <book: 6-C#-book of C#-book_authors.author.None>

In [15]: author.objects.last()
Out[15]: <author: 6-Jay-Jay-jay@jay.com--book_authors.book.None>

In [16]: a = author.objects.last()

In [17]: a.first_name = 'Ketul'

In [18]: a.last_name = 'Ketul'

In [19]: a.email = 'ketul@ketul.com'

In [20]: a.save()

In [21]: author.objects.last()
Out[21]: <author: 6-Ketul-Ketul-ketul@ketul.com--book_authors.book.None>

==================================================================================================

6.3. Assign the first author to the first 2 books

In [25]: book.objects.filter(id=2)|book.objects.filter(id=3)
Out[25]: <QuerySet [<book: 2-C sharp-Book of C sharp-book_authors.author.None>, <book: 3-Java-Book of Java-book_authors.author.None>]>

In [28]: author.objects.first()
Out[28]: <author: 2-Mike-Mike-mike@mike.com--book_authors.book.None>

In [43]: a = author.objects.first()

In [51]: book.objects.get(id=2)
Out[51]: <book: 2-C sharp-Book of C sharp-book_authors.author.None>

In [52]: b = book.objects.get(id=2)

In [53]: a.books.add(b)

In [55]: a.save()

In [56]: b = book.objects.get(id=3)

In [57]: a.books.add(b)

In [58]: a.save()

In [60]: book.objects.all()
Out[60]: <QuerySet [<book: 2-C sharp-Book of C sharp-book_authors.author.None>, <book: 3-Java-Book of Java-book_authors.author.None>, <book: 4-Python-Book of Python-book_authors.author.None>, <book: 5-PHP-Book of PHP-book_authors.author.None>, <book: 6-C#-book of C#-book_authors.author.None>]>

In [61]: author.objects.all()
Out[61]: <QuerySet [<author: 2-Mike-Mike-mike@mike.com--book_authors.book.None>, <author: 3-Speros-Speros-speros@speros.com--book_authors.book.None>, <author: 4-John-John-john@john.com--book_authors.book.None>, <author: 5-Jadee-Jadee-jadee@jadee.com--book_authors.book.None>, <author: 6-Ketul-Ketul-ketul@ketul.com--book_authors.book.None>]>

In [62]: a.books.all()
Out[62]: <QuerySet [<book: 2-C sharp-Book of C sharp-book_authors.author.None>, <book: 3-Java-Book of Java-book_authors.author.None>]>

==================================================================================================

6.4. Assign the second author to the first 3 books

In [65]: author.objects.all()
Out[65]: <QuerySet [<author: 2-Mike-Mike-mike@mike.com--book_authors.book.None>, <author: 3-Speros-Speros-speros@speros.com--book_authors.book.None>, <author: 4-John-John-john@john.com--book_authors.book.None>, <author: 5-Jadee-Jadee-jadee@jadee.com--book_authors.book.None>, <author: 6-Ketul-Ketul-ketul@ketul.com--book_authors.book.None>]>

In [66]: book.objects.all()
Out[66]: <QuerySet [<book: 2-C sharp-Book of C sharp-book_authors.author.None>, <book: 3-Java-Book of Java-book_authors.author.None>, <book: 4-Python-Book of Python-book_authors.author.None>, <book: 5-PHP-Book of PHP-book_authors.author.None>, <book: 6-C#-book of C#-book_authors.author.None>]>

In [68]: a = author.objects.get(id=3)

In [69]: b = book.objects.get(id=2)

In [70]: a.books.add(b)

In [71]: a.save()

In [72]: b = book.objects.get(id=3)

In [73]: a.books.add(b)

In [74]: a.save()

In [75]: b = book.objects.get(id=4)

In [76]: a.books.add(b)

In [77]: a.save()

==================================================================================================

6.5. Assign the third author to the first 4 books

In [97]: a = author.objects.get(id=4)

In [98]: b = book.objects.get(id=2)

In [99]: a.books.add(b)

In [100]: a.save()

In [101]: b = book.objects.get(id=3)

In [102]: a.books.add(b)

In [103]: a.save()

In [104]: b = book.objects.get(id=4)

In [105]: a.books.add(b)

In [106]: a.save()

In [107]: b = book.objects.get(id=5)

In [108]: a.books.add(b)

In [109]: a.save()

==================================================================================================

6.6. Assign the fourth author to the first 5 books (or in other words, all the books)

In [114]: a = author.objects.get(id=5)

In [115]: b = book.objects.get(id=2)

In [116]: a.books.add(b)

In [117]: a.save()

In [118]: b = book.objects.get(id=3)

In [119]: a.books.add(b)

In [120]: a.save()

In [121]: b = book.objects.get(id=4)

In [122]: a.books.add(b)

In [123]: a.save()

In [124]: b = book.objects.get(id=5)

In [125]: a.books.add(b)

In [126]: a.save()

In [127]: b = book.objects.get(id=6)

In [128]: a.books.add(b)

In [129]: a.save()

==================================================================================================

6.7. For the 3rd book, retrieve all the authors

==================================================================================================

6.8. For the 3rd book, remove the first author

==================================================================================================

6.9. For the 2nd book, add the 5th author as one of the authors

==================================================================================================

6.10. Find all the books that the 3rd author is part of

==================================================================================================

6.11. Find all the books that the 2nd author is part of

==================================================================================================
